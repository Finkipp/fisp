Руководство оператора

Введение:
Данная программа предназначена для управления базой данных оборудования. Она позволяет добавлять, удалять и отображать информацию об оборудовании, а также обновлять данные о состоянии и гарантии товара. В этом руководстве вы найдете инструкции по установке, запуску и использованию программы.

Системные требования:
- Python 3.6 или выше
- Библиотека SQLite (входит в стандартную библиотеку Python)

Установка:
1.	Убедитесь, что у вас установлен Python. Вы можете скачать последнюю версию с официального сайта Python (https://www.python.org/downloads/).
2.	Скопируйте приведённый ниже код в текстовый редактор и сохраните файл с именем equipment_manager.py.

import os
import sqlite3

def reset_database():
    # Удаляем старую базу данных, если она существует
    if os.path.exists('equipment.db'):
        os.remove('equipment.db')

    # Создаем новую базу данных и таблицу
    connection = sqlite3.connect('equipment.db')
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS equipment (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        name TEXT NOT NULL,
                        type TEXT NOT NULL,
                        manufacturer TEXT NOT NULL,
                        purchase_date TEXT NOT NULL,
                        warranty_end TEXT NOT NULL,
                        status TEXT NOT NULL)''')
    
    # Вставляем примеры данных с конкретными моделями
    sample_data = [
        ('HP Spectre x360', 'Ноутбук', 'HP', '2022-01-15', '2025-01-15', 'Работает'),
        ('Canon PIXMA G6020', 'Принтер', 'Canon', '2022-05-10', '2024-05-10', 'Работает'),
        ('Epson EcoTank ET-2720', 'Сканер', 'Epson', '2021-07-20', '2023-07-20', 'Не работает'),
        ('BenQ HT2050A', 'Проектор', 'BenQ', '2020-11-25', '2023-11-25', 'Работает'),
        ('Ricoh MP 301', 'Ксерокс', 'Ricoh', '2019-03-12', '2022-03-12', 'Работает'),
        ('TP-Link Archer AX50', 'Маршрутизатор', 'TP-Link', '2021-04-15', '2024-04-15', 'Работает'),
        ('LG 27UK850-W', 'Монитор', 'LG', '2020-08-30', '2023-08-30', 'Работает'),
        ('Logitech MX Master 3', 'Мышь', 'Logitech', '2023-01-05', '2024-01-05', 'Работает')
    ]

    # Вставка данных в таблицу
    cursor.executemany("INSERT INTO equipment (name, type, manufacturer, purchase_date, warranty_end, status) VALUES (?, ?, ?, ?, ?, ?)", sample_data)
    connection.commit()
    connection.close()

# Вызов функции для сброса базы данных
reset_database()

3.	Убедитесь, что файл сохранен с расширением .py.

Запуск программы:
1.	Откройте терминал или командную строку.
2.	Перейдите в каталог, где был сохранен файл equipment_manager.py, с помощью команды cd:
      cd путь_к_каталогу
3.	Запустите программу, выполнив команду:
      python equipment_manager.py

Описание функций программы:
Программа автоматически создает базу данных equipment.db и таблицу equipment, если они отсутствуют, и заполняет таблицу начальным набором данных о различных моделях оборудования.

Структура таблицы equipment:
	id: Уникальный идентификатор оборудования (Auto-increment).
	name: Название оборудования (например, "HP Spectre x360").
	type: Тип оборудования (например, "Ноутбук").
	manufacturer: Производитель (например, "HP").
	purchasedate: Дата покупки (формат: ГГГГ-ММ-ДД).
	warrantyend: Дата окончания гарантии (формат: ГГГГ-ММ-ДД).
	status: Текущий статус оборудования (например, "Работает", "В ремонте", "Не работает").


Примечания:
	Для управления данными, такими как добавление, удаление или обновление записей, потребуется реализовать дополнительные функции, которые можно будет добавить в будущие версии программы.
	Дополнительные команды для работы с базой данных и их описание могут быть добавлены в будущих релизах.

Заключение:
Эта программа является простой и эффективной системой для управления информацией об оборудовании. Вы можете доработать программу, добавив новые функции для расширения её возможностей.